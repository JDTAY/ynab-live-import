{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description" : "Creates Pipeline and required resources for TaskCat CI. License: Apache 2.0 (Please do not remove)(qs-1ops82lkf). Combined with ynab-live-import",
    "Parameters" : {
        "BudgetId" : {
            "Type" : "String",
            "Description": "YNAB budget id"
        },
        "PersonalAccessToken": {
            "Type": "String",
            "Description": "YNAB API personal access token"
        },
        "Domain": {
            "Type": "String",
            "Description": "Domain that receives transaction emails (example.com)"
        },
        "GitHubUser" : {
            "Description" : "Enter GitHub username of the repository owner",
            "Type" : "String"
        },
        "GitHubRepoName" : {
          "Description" : "Enter the repository name that should be monitored for changes",
          "Type" : "String"
        },
        "SourceRepoBranch" : {
          "Description" : "Enter the branch name to be monitored",
          "Type" : "String"
        },
        "ReleaseBranch" : {
          "Description" : "Enter the release branch name. On successfull build, above branch will be merged into this branch.",
          "Type" : "String"
        },
        "GitHubOAuthToken" : {
          "Description" : "Create a token with 'repo' and 'admin:repo_hook' permissions here https://github.com/settings/tokens",
          "Type" : "String",
          "NoEcho" : "true"
        },
        "QSS3BucketName" : {
          "AllowedPattern" : "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
          "ConstraintDescription" : "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
          "Default" : "aws-quickstart",
          "Description" : "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
          "Type" : "String"
        },
        "QSS3KeyPrefix" : {
          "AllowedPattern" : "^[0-9a-zA-Z-/]*$",
          "ConstraintDescription" : "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
          "Default" : "quickstart-taskcat-ci/",
          "Description" : "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
          "Type" : "String"
        }
    },
    "Resources": {
        "CopyLambdasStack" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
              "TemplateURL" : {
                "Fn::Sub" : "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/copy-lambdas.template"
              },
              "Parameters" : {
                "BucketName" : {
                  "Ref" : "ArtifactBucket"
                },
                "QSS3BucketName" : {
                  "Ref" : "QSS3BucketName"
                },
                "QSS3KeyPrefix" : {
                  "Ref" : "QSS3KeyPrefix"
                }
              }
            }
          },
          "SSMStack" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : [ "CopyLambdasStack" ],
            "Properties" : {
              "TemplateURL" : {
                "Fn::Sub" : "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/ssm.template"
              },
              "Parameters" : {
                "GithubToken" : {
                  "Ref" : "GitHubOAuthToken"
                },
                "LambdaZipsBucket" : {
                  "Fn::GetAtt" : [ "CopyLambdasStack", "Outputs.LambdaZipsBucket" ]
                },
                "QSS3KeyPrefix" : {
                  "Ref" : "QSS3KeyPrefix"
                }
              }
            }
          },
          "GitMergeLambda" : {
            "Type" : "AWS::Lambda::Function",
            "DependsOn" : [ "GitMergeRole", "CopyLambdasStack", "SSMStack" ],
            "Properties" : {
              "Code" : {
                "S3Bucket" : {
                  "Fn::GetAtt" : [ "CopyLambdasStack", "Outputs.LambdaZipsBucket" ]
                },
                "S3Key" : {
                  "Fn::Sub" : "${QSS3KeyPrefix}functions/package/lambda.zip"
                }
              },
              "Description" : "Merge github branches",
              "FunctionName" : "Git_Merge",
              "Handler" : {
                "Fn::Join" : [ ".", [ "git_merge", "lambda_handler" ] ]
              },
              "Role" : {
                "Fn::GetAtt" : [ "GitMergeRole", "Arn" ]
              },
              "Runtime" : "python3.6",
              "Timeout" : "30"
            }
          },
          "GitMergeRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
              "AssumeRolePolicyDocument" : {
                "Version" : "2012-10-17",
                "Statement" : [ {
                  "Effect" : "Allow",
                  "Principal" : {
                    "Service" : "lambda.amazonaws.com"
                  },
                  "Action" : "sts:AssumeRole"
                } ]
              },
              "Path" : "/",
              "Policies" : [ {
                "PolicyName" : "GitMergeRolePolicy",
                "PolicyDocument" : {
                  "Version" : "2012-10-17",
                  "Statement" : [ {
                    "Effect" : "Allow",
                    "Action" : [ "logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents" ],
                    "Resource" : [ {
                      "Fn::Join" : [ "", [ "arn:aws:logs:", {
                        "Ref" : "AWS::Region"
                      }, ":", {
                        "Ref" : "AWS::AccountId"
                      }, ":log-group:/aws/lambda/*" ] ]
                    } ]
                  }, {
                    "Effect" : "Allow",
                    "Action" : [ "codepipeline:GetPipeline", "codepipeline:GetPipelineExecution", "codepipeline:GetPipelineState", "codepipeline:ListPipelines", "codepipeline:ListPipelineExecutions" ],
                    "Resource" : [ {
                      "Fn::Sub" : "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*"
                    } ]
                  }, {
                    "Effect" : "Allow",
                    "Action" : [ "codepipeline:GetJobDetails", "codepipeline:PutJobSuccessResult", "codepipeline:PutJobFailureResult" ],
                    "Resource" : "*"
                  }, {
                    "Effect" : "Allow",
                    "Action" : [ "s3:GetObject" ],
                    "Resource" : "*"
                  }, {
                    "Effect" : "Allow",
                    "Action" : [ "ssm:Describe*", "ssm:Get*", "ssm:List*" ],
                    "Resource" : "*"
                  }, {
                    "Effect" : "Allow",
                    "Action" : [ "kms:Decrypt" ],
                    "Resource" : {
                             "Fn::GetAtt" : [ "SSMStack", "Outputs.KMSKeyArn" ] 
                    }
                  } ]
                }
              } ]
            }
          },
          "ArtifactBucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
              "AccessControl" : "Private",
              "LifecycleConfiguration" : {
                "Rules" : [ {
                  "NoncurrentVersionExpirationInDays" : 30,
                  "Status" : "Enabled"
                } ]
              },
              "VersioningConfiguration" : {
                "Status" : "Enabled"
              }
            }
          },
          "IAMRoleStack" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : [ "ArtifactBucket" ],
            "Properties" : {
              "TemplateURL" : {
                "Fn::Sub" : "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/iam-roles.template"
              },
              "Parameters" : {
                "ArtifactBucket" : {
                  "Ref" : "ArtifactBucket"
                }
              }
            }
          },
          "CodePipelineStack" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : [ "ArtifactBucket", "IAMRoleStack" ],
            "Properties" : {
              "TemplateURL" : {
                "Fn::Sub" : "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/pipeline.template"
              },
              "Parameters" : {
                "GitHubUser" : {
                  "Ref" : "GitHubUser"
                },
                "GitHubRepoName" : {
                  "Ref" : "GitHubRepoName"
                },
                "SourceRepoBranch" : {
                  "Ref" : "SourceRepoBranch"
                },
                "ReleaseBranch" : {
                  "Ref" : "ReleaseBranch"
                },
                "GitHubOAuthToken" : {
                  "Ref" : "GitHubOAuthToken"
                },
                "ArtifactBucket" : {
                  "Ref" : "ArtifactBucket"
                },
                "GitMergeLambda" : {
                  "Ref" : "GitMergeLambda"
                },
                "CodePipelineRoleArn" : {
                  "Fn::GetAtt" : [ "IAMRoleStack", "Outputs.CodePipelineRoleArn" ]
                },
                "CodeBuildRoleArn" : {
                  "Fn::GetAtt" : [ "IAMRoleStack", "Outputs.CodeBuildRoleArn" ]
                }
              }
            }
          },
        "parseChaseEmail": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "ynab-live-import-lambda-functions",
                    "S3Key": "parseChaseEmail.zip",
                    "S3ObjectVersion": ".axiH5PFT4dqBLL8__kcWmacYBrrzRYH"
                },
                "Environment": {
                    "Variables": {
                        "bucket_name": {
                            "Ref": "transactionEmails"
                        },
                        "table_name": {
                            "Ref": "transactionData"
                        }
                    }
                },
                "FunctionName": "parseChaseEmail",
                "Handler": "lambda_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "transactionEmailParser",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 1
            },
            "DependsOn": [
                "SourceCodeGetPolicy"
            ]
        },
        "parseDiscoverEmail": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "ynab-live-import-lambda-functions",
                    "S3Key": "parseDiscoverEmail.zip",
                    "S3ObjectVersion": "DgtTArQYjuMfbKxE92om1_VEmiO7xEZ_"
                },
                "Environment": {
                    "Variables": {
                        "bucket_name": {
                            "Ref": "transactionEmails"
                        },
                        "table_name": {
                            "Ref": "transactionData"
                        }
                    }
                },
                "FunctionName": "parseDiscoverEmail",
                "Handler": "lambda_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "transactionEmailParser",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 1
            },
            "DependsOn": [
                "SourceCodeGetPolicy"
            ]
        },
        "parseINGEmail": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "ynab-live-import-lambda-functions",
                    "S3Key": "parseINGEmail.zip",
                    "S3ObjectVersion": "DgtTArQYjuMfbKxE92om1_VEmiO7xEZ_"
                },
                "Environment": {
                    "Variables": {
                        "bucket_name": {
                            "Ref": "transactionEmails"
                        },
                        "table_name": {
                            "Ref": "transactionData"
                        }
                    }
                },
                "FunctionName": "parseINGEmail",
                "Handler": "lambda_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "transactionEmailParser",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 1
            },
            "DependsOn": [
                "SourceCodeGetPolicy"
            ]
        },
        "postToYnab": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "ynab-live-import-lambda-functions",
                    "S3Key": "postToYnab.zip",
                    "S3ObjectVersion": "SHTQjsZg1NeBrlYYvEA9P1h674BhHeph"
                },
                "Environment": {
                    "Variables": {
                        "bucket_name": {
                            "Ref": "transactionEmails"
                        },
                        "table_name": {
                            "Ref": "transactionData"
                        },
                        "personal_access_token": {
                            "Ref": "PersonalAccessToken"
                        },
                        "budget_id": {
                            "Ref": "BudgetId"
                        }
                    }
                },
                "FunctionName": "postToYnab",
                "Handler": "lambda_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "transactionPoster",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 10
            },
            "DependsOn": [
                "SourceCodeGetPolicy"
            ]
        },
        "invokeChaseLambda": {
            "Type": "AWS::SES::ReceiptRule",
            "Properties": {
                "After": {
                    "Ref": "saveEmail"
                },
                "Rule": {
                    "Recipients": [
                        {
                            "Fn::Join": [
                                "",
                                [
                                    "chaseynab@",
                                    {
                                        "Ref": "Domain"
                                    }
                                ]
                            ]
                        }
                    ],
                    "Actions": [
                        {
                            "LambdaAction": {
                                "FunctionArn": {
                                    "Fn::GetAtt": [
                                        "parseChaseEmail",
                                        "Arn"
                                    ]
                                }
                            }
                        }
                    ],
                    "Enabled": true,
                    "Name": "invoke-chase-lambda"
                },
                "RuleSetName": {
                    "Ref": "ynabLiveImportRuleSet"
                }
            },
            "DependsOn": [
                "ynabLiveImportRuleSet"
            ]
        },
        "saveEmail": {
            "Type": "AWS::SES::ReceiptRule",
            "Properties": {
                "Rule": {
                    "Recipients": [
                        {
                            "Ref": "Domain"
                        }
                    ],
                    "Actions": [
                        {
                            "S3Action": {
                                "BucketName": {
                                    "Ref": "transactionEmails"
                                }
                            }
                        }
                    ],
                    "Enabled": true,
                    "Name": "save-email"
                },
                "RuleSetName": {
                    "Ref": "ynabLiveImportRuleSet"
                }
            }
        },
        "ynabLiveImportRuleSet": {
            "Type": "AWS::SES::ReceiptRuleSet",
            "Properties": {
                "RuleSetName": "ynab-live-import-rule-set"
            }
        },
        "transactionEmails": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [
                        "",
                        [
                            "ynab-transaction-emails-",
                            {
                                "Ref": "BudgetId"
                            }
                        ]
                    ]
                }
            }
        },
        "transactionData": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "message_id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "message_id",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                },
                "StreamSpecification": {
                    "StreamViewType": "NEW_IMAGE"
                },
                "TableName": "transactions"
            }
        },
        "transactionStreamToLambda": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "BatchSize": 1,
                "Enabled": true,
                "EventSourceArn": {
                    "Fn::GetAtt": [
                        "transactionData",
                        "StreamArn"
                    ]
                },
                "FunctionName": {
                    "Ref": "postToYnab"
                },
                "StartingPosition": "LATEST"
            }
        },
        "transactionPoster": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole",
                    {
                        "Ref": "SourceCodeGetPolicy"
                    }
                ],
                "RoleName": "transactionPoster",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "dynamodb:DeleteItem",
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "transactionData",
                                            "Arn"
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "TransactionsDBDelete"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "dynamodb:GetItem",
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "transactionData",
                                            "Arn"
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "TransactionsDBGet"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:DeleteObject",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "transactionEmails",
                                                        "Arn"
                                                    ]
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "TransactionEmailsDelete"
                    }
                ]
            }
        },
        "transactionEmailParser": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    {
                        "Ref": "SourceCodeGetPolicy"
                    }
                ],
                "RoleName": "transactionEmailParser",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "dynamodb:PutItem",
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "transactionData",
                                            "Arn"
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "TransactionsDBPut"
                    },
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:GetObject",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "transactionEmails",
                                                        "Arn"
                                                    ]
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "TransactionEmailsGet"
                    }
                ]
            }
        },
        "emailsBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "transactionEmails"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "AllowSESPuts",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ses.amazonaws.com"
                            },
                            "Action": "s3:PutObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "transactionEmails"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "StringEquals": {
                                    "aws:Referer": {
                                        "Ref": "AWS::AccountId"
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        },
        "invokeDiscoverLambda": {
            "Type": "AWS::SES::ReceiptRule",
            "Properties": {
                "After": {
                    "Ref": "invokeChaseLambda"
                },
                "Rule": {
                    "Recipients": [
                        {
                            "Fn::Join": [
                                "",
                                [
                                    "discoverynab@",
                                    {
                                        "Ref": "Domain"
                                    }
                                ]
                            ]
                        }
                    ],
                    "Actions": [
                        {
                            "LambdaAction": {
                                "FunctionArn": {
                                    "Fn::GetAtt": [
                                        "parseDiscoverEmail",
                                        "Arn"
                                    ]
                                }
                            }
                        }
                    ],
                    "Enabled": true,
                    "Name": "invoke-discover-lambda"
                },
                "RuleSetName": {
                    "Ref": "ynabLiveImportRuleSet"
                }
            }
        },
        "invokeINGLambda": {
            "Type": "AWS::SES::ReceiptRule",
            "Properties": {
                "After": {
                    "Ref": "invokeDiscoveryLambda"
                },
                "Rule": {
                    "Recipients": [
                        {
                            "Fn::Join": [
                                "",
                                [
                                    "ingynab@",
                                    {
                                        "Ref": "Domain"
                                    }
                                ]
                            ]
                        }
                    ],
                    "Actions": [
                        {
                            "LambdaAction": {
                                "FunctionArn": {
                                    "Fn::GetAtt": [
                                        "parseDiscoverEmail",
                                        "Arn"
                                    ]
                                }
                            }
                        }
                    ],
                    "Enabled": true,
                    "Name": "invoke-discover-lambda"
                },
                "RuleSetName": {
                    "Ref": "ynabLiveImportRuleSet"
                }
            }
        },
        "invokeChaseLambdaaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "parseChaseEmail"
                },
                "Principal": "ses.amazonaws.com",
                "SourceAccount": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "invokeDiscoverLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "parseDiscoverEmail"
                },
                "Principal": "ses.amazonaws.com",
                "SourceAccount": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "invokeINGLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "parseINGEmail"
                },
                "Principal": "ses.amazonaws.com",
                "SourceAccount": {
                    "Ref": "AWS::AccountId"
                }
            }
        },
        "SourceCodeGetPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "s3:GetObject",
                            "Resource": "arn:aws:s3:::ynab-live-import-lambda-functions/*"
                        }
                    ]
                },
                "ManagedPolicyName": "SourceCodeGetPolicy"
            }
        }
    },
    "Outputs" : {
      "CodePipelineURL" : {
        "Description" : "The URL of the created Pipeline",
        "Value" : {
          "Fn::Sub" : [
            "https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${CodePipelineName}",
            { "CodePipelineName": { "Fn::GetAtt" : [ "CodePipelineStack", "Outputs.CodePipelineName" ]} }
          ]
        }
      },
      "TaskCatReports" : {
        "Description" : "Path to the TaskCat report. Each report is named as CODEBUILD_BUILD_ID.zip",
        "Value" : {
          "Fn::Sub" : "s3://${ArtifactBucket}/taskcat_reports/"
        }
      }
    },
    "Metadata" : {
        "AWS::CloudFormation::Interface" : {
          "ParameterGroups" : [ {
            "Label" : {
              "default" : "GitHub Configuration"
            },
            "Parameters" : [ "GitHubUser", "GitHubRepoName", "SourceRepoBranch", "ReleaseBranch", "GitHubOAuthToken" ]
          }, {
            "Label" : {
              "default" : "AWS Quick Start Configuration"
            },
            "Parameters" : [ "QSS3BucketName", "QSS3KeyPrefix" ]
          } ],
          "ParameterLabels" : {
            "GitHubUser" : {
              "default" : "Repository owner"
            },
            "GitHubRepoName" : {
              "default" : "Repository name"
            },
            "SourceRepoBranch" : {
              "default" : "Source branch"
            },
            "ReleaseBranch" : {
              "default" : "Release branch"
            },
            "GitHubOAuthToken" : {
              "default" : "OAuth2 token"
            },
            "QSS3BucketName" : {
              "default" : "Quick Start S3 Bucket Name"
            },
            "QSS3KeyPrefix" : {
              "default" : "Quick Start S3 Key Prefix"
            }
          }
        }
    }
}
